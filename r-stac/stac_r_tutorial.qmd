---
title: "Introduction to the SpatioTemporal Asset Catalog (STAC) in R language"
author:
  - name: Felipe Carvalho de Souza
    affiliation: Earth Observation and Geoinformatics Division, National Institute for Space Research (INPE)
  - name: Felipe Menino Carlos
    affiliation: Earth Observation and Geoinformatics Division, National Institute for Space Research (INPE)
  - name: Rennan Marujo
    affiliation: Earth Observation and Geoinformatics Division, National Institute for Space Research (INPE)
  - name: Gilberto R. Queiroz
    affiliation: Earth Observation and Geoinformatics Division, National Institute for Space Research (INPE)
date: "2023-02-13"
format: 
  html:
    toc: true
    code-fold: false
    number-sections: true
---

## Abstract

This document overviews how to use the STAC service to discover and access the data products from the Brazil Data Cube using rstac package.

::: {.callout-note}
This document is a supplement to the following paper:

Zaglia, M.; Vinhas, L.; Queiroz, G. R.; Simões, R. Catalogação de Metadados do Cubo de Dados do Brasil com o SpatioTemporal Asset Catalog. In: Proceedings XX GEOINFO, November 11-13, 2019, São José dos Campos, SP, Brazil. p 280-285.
:::

## Introduction

The SpatioTemporal Asset Catalog (STAC) is a specification created through several organizations' collaboration to increase satellite image search interoperability.

The diagram depicted in the picture contains the most important concepts behind the STAC data model:

![STAC model](stac_model.png)

The description of the concepts below are adapted from the STAC Specification:

- **Item**: a STAC Item is the atomic unit of metadata in STAC, providing links to the actual assets (including thumbnails) they represent. It is a GeoJSON Feature with additional fields for things like time, links to related entities, and mainly to the assets. According to the specification, this is the atomic unit that describes the data to be discovered in a STAC Catalog or Collection.

- **Asset**: a spatiotemporal asset is any file representing information about the earth captured in a certain space and time.

- **Catalog**: provides a structure to link various STAC Items together or even to other STAC Catalogs or Collections.

- **Collection**: is a specialization of the Catalog that allows additional information about a spatio-temporal collection of data.

## Clients

The facilities provided by the STAC service can be used in any programming language that supports network communication via HTTP requests. This means that all modern languages can be used to access the operations of the service.

So, in addition to the specification and implementation of the STAC service reference, the BDC also provides clients with different programming languages. These clients offer facilities that allow easy use of the STAC service in the programming languages they are implemented.

- stac.py - Python client
- rstac - R Client

This document will present how STAC can be used in R through the rstac client.

Let's load the required packages:

```{r}
#| message: false
library(magrittr) # Package to use pipe operator %>%
library(rstac)    # package rstac
library(terra)    # package to manipulate rasters
```

Then we will create a query object called `stac_obj` pointing to the service address:

```{r}
stac_obj <- stac("https://data.inpe.br/bdc/stac/v1/")
```

## Listing Available Data Products

To list all the image collections and data cube collections:

```{r}
#| eval: false
# Query to the data catalog
catalog <- stac_obj %>% get_request()
print(catalog)

# Query the available product collections
collections <- stac_obj %>%
    collections() %>%
    get_request()

print(collections, n = 31)
```

## Retrieving Collection Metadata

The `collections()` function returns information about a given image or data cube collection:

```{r}
collection_info <- stac_obj %>%
    collections("CBERS4-WFI-16D-2") %>%
    get_request()

print(collection_info)
```

## Retrieving Items

The `items()` function returns a query given a bounding box (bbox) and a date range:

```{r}
items <- stac_obj %>%
    collections("CBERS4-WFI-16D-2") %>%
    items(datetime = "2018-08-01/2019-07-31",
          bbox  = c(-45.9, -12.9, -45.4, -12.6),
          limit = 20) %>%
    get_request()

print(items)
```

Let's view the available bands:

```{r}
items_assets(items)
```

## Working with Assets

Assets are links to images, thumbnails or specific metadata files. We can view the assets URL using `assets_url()`:

```{r}
assets_url(items, asset_names = c("BAND14", "BAND13"))[1:3]
```

## Reading and Visualizing Images

First, let's filter the assets for a specific date:

```{r}
# List datetime of all items
items_datetime(items)

# Filter assets by datetime
item_filtered <- items_filter(items, 
    filter_fn = function(item) 
        item$properties[["datetime"]] == "2019-07-28T00:00:00.000000Z")

print(item_filtered)
```

Reading the images:

```{r}
blue_url  <- assets_url(item_filtered, asset_names = "BAND13", append_gdalvsi = TRUE)
green_url <- assets_url(item_filtered, asset_names = "BAND14", append_gdalvsi = TRUE)
red_url   <- assets_url(item_filtered, asset_names = "BAND15", append_gdalvsi = TRUE)

# Reading the first images of each band
blue_rast  <- terra::rast(blue_url)
green_rast <- terra::rast(green_url)
red_rast   <- terra::rast(red_url)
```

### Image Cropping

We'll crop the image with a row and column window:

```{r}
#install.packages('sf', repos='https://cran.r-project.org')

proj_orig <- sf::st_crs("+proj=longlat +datum=WGS84")
#BDC proj4 string
proj_dest <- sf::st_crs("+proj=aea +lat_0=-12 +lon_0=-54 +lat_1=-2 +lat_2=-22 +x_0=5000000 +y_0=10000000 +ellps=GRS80 +units=m +no_defs")

pts <- tibble::tibble(
    lon = c(-45.89957, -45.40046),
    lat = c(-12.9142, -12.58579)
)
pts_sf <- sf::st_as_sf(pts, coords = c("lon", "lat"), crs = proj_orig)
pts_transf <- sf::st_transform(pts_sf, crs = proj_dest)

lat_dest <- sf::st_coordinates(pts_transf)[, 2]
lon_dest <- sf::st_coordinates(pts_transf)[, 1]

# Defining clipping extent
transformed_bbox <- terra::ext(5865751, 5920212, 9884783, 9920060)

# Cropping images
blue_rast_cropped  <- terra::crop(blue_rast, transformed_bbox)
green_rast_cropped <- terra::crop(green_rast, transformed_bbox)
red_rast_cropped   <- terra::crop(red_rast, transformed_bbox)
```

### Visualizing Individual Bands

```{r}
#| fig-width: 16
#| fig-height: 5
par(mfrow = c(1, 3))
plot(blue_rast_cropped,  main = "Blue Band")
plot(green_rast_cropped, main = "Green Band")
plot(red_rast_cropped,   main = "Red Band")
```

### RGB Composite

```{r}
#| fig-width: 8
#| fig-height: 8
# Creating band composition
rgb <- c(red_rast_cropped, green_rast_cropped, blue_rast_cropped)

# RGB view
plotRGB(rgb, r = 1, g = 2, b = 3, stretch = "lin")
```

## Calculating NDVI

The Normalized Difference Vegetation Index (NDVI) is calculated using the Red and Near Infrared (NIR) spectral bands:

$NDVI = \frac{NIR - Red}{NIR + Red}$

```{r}
# Get band URLs
red <- assets_url(item_filtered, asset_names = "BAND15", append_gdalvsi = TRUE)
nir <- assets_url(item_filtered, asset_names = "BAND16", append_gdalvsi = TRUE)

# Read and crop bands
red_rast <- terra::crop(terra::rast(red), transformed_bbox)
nir_rast <- terra::crop(terra::rast(nir), transformed_bbox)

# Calculate NDVI
ndvi <- (nir_rast - red_rast) / (nir_rast + red_rast)

plot(ndvi, main = "NDVI")
```

## Image Thresholding

Let's analyze the NDVI distribution and apply thresholding:

```{r}
#| fig-width: 8
#| fig-height: 6
# Create histogram
terra::hist(
    ndvi, 
    xlim   = c(0, 1), 
    breaks = 10,  
    main   = "NDVI Distribution",
    xlab   = "NDVI", 
    ylab   = "Frequency", 
    col    = "wheat", 
    xaxt   = "n"
)

# Define x-axis intervals
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
```

Applying thresholds:

```{r}
# Create thresholded image
labelled_img <- ndvi

vector_labels <- c(
    0, 0.2, 1,    # value 1: Dark pixels
    0.2, 0.45, 2, # value 2: Little vegetation
    0.45, 1, 3    # value 3: Abundant vegetation
)   

matrix_labels <- matrix(vector_labels, ncol = 3, byrow = TRUE)
image_labelled <- terra::classify(labelled_img, matrix_labels, include.lowest = TRUE)

# Plot results
par(mfrow = c(1, 2))
plot(ndvi, main = "NDVI")
plot(image_labelled, col = c("#E4E538", "#EFB17B", "#00AF22"), main = "Thresholded Image")
```

## Temporal Analysis

Let's compare NDVI values between two dates:

```{r}
# First date (September 30, 2018)
items_first <- items_filter(items, 
    filter_fn = function(item) 
        item$properties[["datetime"]] == "2018-09-30T00:00:00.000000Z")
ndvi_first <- assets_url(items_first, asset_names = "NDVI", append_gdalvsi = TRUE)

# Second date (January 1, 2019)
items_second <- items_filter(items, 
    filter_fn = function(item) 
        item$properties[["datetime"]] == "2019-01-01T00:00:00.000000Z")
ndvi_second <- assets_url(items_second, asset_names = "NDVI", append_gdalvsi = TRUE)

# Read and crop NDVI images
ndvi_first_rast <- terra::crop(terra::rast(ndvi_first), transformed_bbox)
ndvi_second_rast <- terra::crop(terra::rast(ndvi_second), transformed_bbox)

# Calculate difference
ndvi_diff <- ndvi_second_rast - ndvi_first_rast

# Convert to leaflet-compatible format and project to WGS84
ndvi_diff_wgs84 <- terra::project(ndvi_diff, "EPSG:4326")

# Create color palette for NDVI differences
library(leaflet)
library(RColorBrewer)

# Create a custom color palette
pal <- colorNumeric(
  palette = "RdYlBu",
  domain = values(ndvi_diff_wgs84),
  na.color = "transparent",
  reverse = TRUE
)

# Create leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap tiles
  addRasterImage(
    ndvi_diff_wgs84,
    colors = pal,
    opacity = 0.7
  ) %>%
  addLegend(
    position = "bottomright",
    pal = pal,
    values = values(ndvi_diff_wgs84),
    title = "NDVI Difference",
    labFormat = labelFormat(transform = function(x) round(x, 2))
  )
```

## References

- Spatio Temporal Asset Catalog Specification
- Brazil Data Cube R Client Library for STAC Service - GitHub Repository 